= ふりかえりの進め方

: author
   結城洋志
: institution
   株式会社クリアコード
: content-source
   リーダブルコード演習
: date
   2021-09-14
: allotted-time
   10m
: theme
   clear-code

= 目的

  * リーダブルの基準を全体で共有

= おさらい：今日の演習の内容

  * 他のチームが書いたコードから\n
    ((*リーダブルコードの工夫*))を探す\n
    (('note:（「読みにくいコード」は探さない）'))
  * リーダブルの基準を\n
    全体で共有する\n
    (('note:（演習参加者のリーダブルコードをブラッシュアップ）'))

= ポイント

(('tag:center'))
リーダブルじゃないコードより\n
リーダブルなコード

((' '))


= 共有するときのポイント

  * 他のチームと\n
    同じことを言ってもよい
  * 同じことを言った\n
    →より一般的にリーダブル\n
    　ということ

= 共有前の準備

(('note:時間：10分'))

  * 代表で発表する人を決める
  * チームで発表する\n
    「リーダブルの基準」を選出

= 共有方法

  * チームの代表者ごとに発表
    * 持ち時間は1チームN分
    * 発表者の画面を共有して説明する

= 共有内容

  * 書き方の名前
  * コードへのリンク/コード片
  * リーダブルと感じた理由
  * 見つけたきっかけ

= 共有内用の例1

  * 名前：「統一されたスタイル」
  * コード：
      
      # _
      void open_TermList(TermList *list, char *path) {
        FILE *fp;
        /* ファイルを開く */
        if ((fp = fopen(path , "r")) == NULL) {
          fprintf (stderr, "ファイルが開けません\n");
          fclose(fp);
          exit(EXIT_FAILURE);

= 共有内用の例2

  * 理由:
    * ファイル内で「)」と「{」の間にスペースを空ける、という
      スタイルに統一しているので読みやすくなっている。
  * きっかけ:
    * その場所を自然に読み過ごせたから。

= 聞くときは

  * 自分が気付いていなかった\n
    リーダブルの基準がないか、\n
    気をつけて聞こう


= ここまでの説明

腑に落ちましたか？


= 共有前の準備開始

(('note:時間：10分'))

  * 代表で発表する人を決める
    * チーム内で1人
    * 発表時は画面を共有
  * チームで発表する\n
    「リーダブルの基準」を選出
    * 書籍「リーダブルコード」にない\n
      ものがあれば、優先的に選出する

= 発表

  * 自分が気付いていなかった\n
    リーダブルの基準がないか、\n
    気をつけて聞こう

