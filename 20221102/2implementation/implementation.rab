= 課題の実装の進め方

: author
   結城洋志
: institution
   株式会社クリアコード
: content-source
   リーダブルコード演習
: date
   2022-11-02
: allotted-time
   10m
: theme
   clear-code

= 準備1

  * キーボード操作の担当を決める（1分）
    * チーム内で誰か1人
    * Gitの操作に慣れた人がおすすめ
    * あくまで((*キーボード操作*))担当
      * 「実装担当者」ではないことに注意
      * 演習中は((*1人で勝手にコードを書き進めない*))！
      * 指示者が言ったとおりにコードを書く！
      * 異論があるときはちゃんと相談してから！

= 準備2

  * 実装する・メモを残すための\n
    ((*Publucなリポジトリー*))を\n
    GitHubに作る（5分）

  名前:
    ${キーボード担当の人のアカウント名}-readable-code
  例:
    piroor-readable-code

→ 作ったらチューターに報告

= 準備3

  * ((*README.txt*))を作る（5分）
    * 内容：今日の開発に使う言語名
    * 今日使うエディターで書くこと！
  * commit & push
  * → pushしたらチューターに報告

= 確認

  * 動作確認できたか
    * いつものエディターを使えた？
    * Git/GitHubを使えた？
  * チームメンバー同士で話せた？
  * いつも通りコードを書けそう？

= 準備4-1

  * キーボード操作担当の人
    * Live Shareセッション開始
      * GitHubまたはMicrosoftアカウントでログイン
      * 「フォルダーを開く」で作業用リポジトリーを開く
      * 左のツールバーのLive Shareボタンをクリック
      * セッションの詳細→「共有」ボタンをクリック
      * クリップボードにコピーされたURLをチームの他の人に共有

== ノート

インストール：
----
VS Code ダウンロード
https://azure.microsoft.com/ja-jp/products/visual-studio-code/

まず、上のURLのページをWebブラウザで開いて、VS Codeをダウンロードし、手元のコンピュータにインストールします。

Live Share Extension Packインストール
https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare-pack

次に、こちらのURLのページをWebブラウザで開いて「Install」ボタンをクリックします。
すると、「vscode:」のリンクをVS Codeで開いて良いかどうかを尋ねられます。
（Webブラウザの種類によって若干操作は変わる可能性があります）
操作を許可して続行すると、VS Codeが起動し、拡張機能のインストール画面が表示されますので、一番上の「インストール」ボタンをクリックします。
インストール完了後、VS Codeを終了して、もう一度起動しなおせば、インストールは完了となります。
----

キーボード操作担当の人向けアドバイス：
 * URLがどっかに行ってしまった場合
   →左のツールバーのLive Shareボタンをクリック
   →「セッションの詳細」の右に表示されている「コラボレーションリンクをコピー」をクリック


= 準備4-2

  * それ以外の人
    * Live Shareセッション参加
      * GitHubまたはMicrosoftアカウントでログイン
      * 左のツールバーのLive Shareボタンをクリック
      * セッションの詳細→「参加」ボタンをクリック
      * 共有されたURLを入力欄に貼り付けてEnter

== ノート

操作担当以外の人向けアドバイス：
 * 「参加」が表示されない場合（Live Shareセッションが開始されてしまっている）
   →左のツールバーのLive Shareボタンをクリック
   →「セッションの詳細」の右に表示されている「コラボレーションセッションの停止」をクリック
   →もう一度左のツールバーのLive Shareボタンをクリック


= 確認

  * キーボード操作担当の人が\n
    開いているファイルが\n
    他の人からも見える？
  * 編集がリアルタイムで\n
    反映される？

準備ができたら説明に進みます

== ノート

操作担当以外の人向けアドバイス：
 * ファイルが表示されない場合
   →左のツールバーのLive Shareボタンをクリック
   →「セッションの詳細」の右に表示されている「コラボレーションセッションから退席する」をクリック
   →もう一度左のツールバーのLive Shareボタンをクリック
   →「参加」
   →共有されたURLを入力欄に貼り付けてEnter で再参加


= 実装の目的

  * 課題の仕様を理解する
  * チームメンバー同士で\n
    コードを読み合う体験をする
  * 「読まれることを意識して\n
    　書かれたコード」を用意する
    * ((*リーダブルなコード*))を書こう！

(('note:（明日の後半戦への布石）'))

= 目的じゃないこと

  * テクニックをたくさん覚える
  * 難しいプログラムを実装する
  * プログラムを速く実装する
  * 高性能なプログラムを実装する
  * 奇抜な方法で目立つ

= 課題の傾向

  * 技術的に難しいことは\n
    意図的に避けている
  * 段階的に改良していく
  * 時間内で実装しきれない分量
    * ((*すべて実装する必要はない！*))

== ノート

段階的に改良していくということは、前提がその都度変わっていくということ。
先ほど「前提が変化するとリーダブルさの基準も変わる」と話した。
段階が進むごとに、「どうするとリーダブルになるか？」を考えてほしい。
時には大きな変更をした方がいいかもしれない。

= メモを書く

  * 工夫したことはissueに書く
    * 1つのissueに1つの工夫でOK
  * メモに含めること
    * 実際のコードのURLか\n
      コード片（差分）
    * リーダブルな理由

= メモ例

  # _
  タイトル： 統一されたスタイル ← リーダブルな書き方の名前

  ↓本文↓
  --
  URL: https://github.com/kou/.../commit/eb02be

  コード:
  ```
  @@ -64,7 +64,7 @@ void add_term_to_TermList(...) {
   void open_TermList(TermList *list, char *path) {
     FILE *fp;
     /* ファイルを開く */
  -  if ((fp = fopen(path , "r")) == NULL){
  +  if ((fp = fopen(path , "r")) == NULL) {
       fprintf (stderr, "ファイルが開けません\n");
       fclose(fp);
       exit(EXIT_FAILURE);
  ```

  理由:
  ファイル内でスタイルを統一しているので読みやすくなっている。

== ノート

この例では、if文の条件部分の閉じ丸括弧と開き波括弧の間にスペースを追加している。
その3行前の部分では閉じ丸括弧と開き波括弧の間にスペースが空いていて、そちらに揃えている。

= 作業のイメージ

  # image
  # src = images/working-style.png
  # relative_width = 60

== プロパティー

: enable-title-on-image
   false

= リーダブルコードとは

  * 読む人基準
    * 「読む人」が　読みやすいなら\n
      リーダブル
  * 読む人の視点を意識してみて
    * どんな人が読む？
    * どんな前提知識がある？

= 困ったら1

  * チューターに相談
    * チューターは((*答えを教えない*))
    * 一緒に考えてくれる
  * 答えを教えない理由
    * 参加者が考える機会を奪わないため
    * 一緒に考えると新しい視点が増える

= 困ったら2

  * 他のチームに相談
    * 答えを教えてもよい
    * 一緒に考えてもよい
  * 条件
    * 答えを教えるときは理由も伝える\n
      (('note:（教える参加者が考える機会になる！）'))
    * 聞く人は理由も聞く\n
      (('note:（考え方を知ると新しい視点でコードを読める！）'))

= 実装開始

  * 仕様
    * task.md
  * 練習
    * 講師がtask.mdを読んで説明
    * 仕様1を各チームで実装
    * 実装できたらチューターに声掛け\n
      →仕様2以降実装

= ここまでの説明

腑に落ちましたか？

= 開始

16:05まで

= クロージング

* 実装結果をcommit & push
* キリが悪い場合は\n
  コミットメッセージ末尾に\n
  「(WIP)」と書く\n
  (('note:（WIP = Work In Progress：作業が進行中の意）'))

